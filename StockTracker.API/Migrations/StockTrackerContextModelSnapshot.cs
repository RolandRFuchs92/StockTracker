// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockTracker.Context;

namespace StockTracker.API.Migrations
{
    [DbContext(typeof(StockTrackerContext))]
    partial class StockTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StockTracker.Model.Clients.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("NVARCHAR(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("Bit");

                    b.Property<DateTime?>("LastCheckup")
                        .HasColumnType("DateTime");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("StockTracker.Model.Clients.ClientSettings", b =>
                {
                    b.Property<int>("ClientSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAnyoneAddStock")
                        .HasColumnType("Bit");

                    b.Property<bool>("CanEmailManagers")
                        .HasColumnType("Bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("DateTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("DateTime");

                    b.Property<int>("TotalUsers")
                        .HasColumnType("Int");

                    b.HasKey("ClientSettingsId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientSettings");
                });

            modelBuilder.Entity("StockTracker.Model.ClientStock.ClientStockItem", b =>
                {
                    b.Property<int>("ClientStockItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("Bit");

                    b.Property<int>("StockCoreId")
                        .HasColumnType("Int");

                    b.Property<int>("StockMax")
                        .HasColumnType("Int");

                    b.Property<int>("StockMin")
                        .HasColumnType("Int");

                    b.HasKey("ClientStockItemId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("StockCoreId")
                        .IsUnique();

                    b.ToTable("ClientStockItem");
                });

            modelBuilder.Entity("StockTracker.Model.ClientStock.ClientStockLevel", b =>
                {
                    b.Property<int>("ClientStockLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientStockItemId")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("Bit");

                    b.Property<int>("MemberId")
                        .HasColumnType("Int");

                    b.Property<int>("Quantity")
                        .HasColumnType("Int");

                    b.HasKey("ClientStockLevelId");

                    b.HasIndex("ClientStockItemId")
                        .IsUnique();

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("ClientStockLevel");
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommCore", b =>
                {
                    b.Property<int>("CommCoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("CommDetailId")
                        .HasColumnType("Int");

                    b.Property<int>("CommSendStatusTypeId")
                        .HasColumnType("Int");

                    b.Property<int>("CommTypeId")
                        .HasColumnType("Int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("CommCoreId");

                    b.HasIndex("CommDetailId");

                    b.HasIndex("CommSendStatusTypeId");

                    b.ToTable("CommCore");
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommDetail", b =>
                {
                    b.Property<int>("CommDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommErrorId")
                        .HasColumnType("INT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(2048)");

                    b.Property<string>("Response")
                        .HasColumnType("NVARCHAR(2048)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("CommDetailId");

                    b.HasIndex("CommErrorId")
                        .IsUnique();

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("CommDetail");
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommError", b =>
                {
                    b.Property<int>("CommErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(2048)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("CommErrorId");

                    b.ToTable("CommError");
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommSendStatusType", b =>
                {
                    b.Property<int>("CommSendStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommSendStatusName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.HasKey("CommSendStatusTypeId");

                    b.ToTable("CommSendStatusType");

                    b.HasData(
                        new { CommSendStatusTypeId = 1, CommSendStatusName = "Qued" },
                        new { CommSendStatusTypeId = 2, CommSendStatusName = "Processing" },
                        new { CommSendStatusTypeId = 3, CommSendStatusName = "Sent" },
                        new { CommSendStatusTypeId = 4, CommSendStatusName = "Failed" },
                        new { CommSendStatusTypeId = 5, CommSendStatusName = "Pending" }
                    );
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommType", b =>
                {
                    b.Property<int>("CommTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("CommTypeId");

                    b.ToTable("CommType");

                    b.HasData(
                        new { CommTypeId = 1, CommName = "SMS" },
                        new { CommTypeId = 2, CommName = "Email" },
                        new { CommTypeId = 3, CommName = "App" },
                        new { CommTypeId = 4, CommName = "WhatsApp" }
                    );
                });

            modelBuilder.Entity("StockTracker.Model.Member.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<DateTime?>("LastActiveDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MemberRoleId")
                        .HasColumnType("INT");

                    b.Property<int>("PersonId");

                    b.HasKey("MemberId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MemberRoleId")
                        .IsUnique();

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("StockTracker.Model.Member.MemberRole", b =>
                {
                    b.Property<int>("MemberRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MemberRoleName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.HasKey("MemberRoleId");

                    b.ToTable("MemberRoles");

                    b.HasData(
                        new { MemberRoleId = 1, MemberRoleName = "Managing Director" },
                        new { MemberRoleId = 2, MemberRoleName = "Admin" },
                        new { MemberRoleId = 3, MemberRoleName = "Team Leader" },
                        new { MemberRoleId = 4, MemberRoleName = "Manager" },
                        new { MemberRoleId = 5, MemberRoleName = "Waiter" },
                        new { MemberRoleId = 6, MemberRoleName = "Chef" },
                        new { MemberRoleId = 7, MemberRoleName = "Sculler" },
                        new { MemberRoleId = 8, MemberRoleName = "Staff" }
                    );
                });

            modelBuilder.Entity("StockTracker.Model.Person.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("PersonSurname")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(256)");

                    b.Property<string>("WhatsApp")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("StockTracker.Model.Shopping.ShoppingList", b =>
                {
                    b.Property<int>("ShoppingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("HasNotified")
                        .HasColumnType("BIT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INT");

                    b.HasKey("ShoppingListId");

                    b.HasIndex("MemberId");

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("StockTracker.Model.Shopping.ShoppingListItem", b =>
                {
                    b.Property<int>("ShoppingListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsCollected")
                        .HasColumnType("BIT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.Property<int>("ShoppingListId")
                        .HasColumnType("INT");

                    b.Property<int>("StockCoreId")
                        .HasColumnType("INT");

                    b.HasKey("ShoppingListItemId");

                    b.HasIndex("ShoppingListId");

                    b.HasIndex("StockCoreId");

                    b.ToTable("ShoppingListItems");
                });

            modelBuilder.Entity("StockTracker.Model.Stock.StockCategory", b =>
                {
                    b.Property<int>("StockCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StockCategoryName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.HasKey("StockCategoryId");

                    b.ToTable("StockCategories");

                    b.HasData(
                        new { StockCategoryId = 1, StockCategoryName = "Meat" },
                        new { StockCategoryId = 2, StockCategoryName = "Pasta" },
                        new { StockCategoryId = 3, StockCategoryName = "Vegetable" },
                        new { StockCategoryId = 4, StockCategoryName = "Powder" },
                        new { StockCategoryId = 5, StockCategoryName = "Canned Good" },
                        new { StockCategoryId = 6, StockCategoryName = "Fruit" },
                        new { StockCategoryId = 7, StockCategoryName = "Oil" },
                        new { StockCategoryId = 8, StockCategoryName = "Edible Liquid" }
                    );
                });

            modelBuilder.Entity("StockTracker.Model.Stock.StockCore", b =>
                {
                    b.Property<int>("StockCoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("StockCategoryId")
                        .HasColumnType("INT");

                    b.Property<string>("StockCoreName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<int>("StockSupplierDetailId")
                        .HasColumnType("INT");

                    b.Property<int>("StockTypeId")
                        .HasColumnType("INT");

                    b.HasKey("StockCoreId");

                    b.HasIndex("StockCategoryId")
                        .IsUnique();

                    b.HasIndex("StockSupplierDetailId")
                        .IsUnique();

                    b.HasIndex("StockTypeId")
                        .IsUnique();

                    b.ToTable("StockCores");
                });

            modelBuilder.Entity("StockTracker.Model.Stock.StockType", b =>
                {
                    b.Property<int>("StockTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StockTypeName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)");

                    b.HasKey("StockTypeId");

                    b.ToTable("StockTypes");

                    b.HasData(
                        new { StockTypeId = 1, StockTypeName = "Frozen Treat" },
                        new { StockTypeId = 2, StockTypeName = "Raw Fruit" },
                        new { StockTypeId = 3, StockTypeName = "Sugar" },
                        new { StockTypeId = 4, StockTypeName = "Cooking Oil" },
                        new { StockTypeId = 5, StockTypeName = "Chicken" },
                        new { StockTypeId = 6, StockTypeName = "Fish" },
                        new { StockTypeId = 7, StockTypeName = "Pork" },
                        new { StockTypeId = 8, StockTypeName = "Beef" },
                        new { StockTypeId = 9, StockTypeName = "Sauce" },
                        new { StockTypeId = 10, StockTypeName = "Spice" },
                        new { StockTypeId = 11, StockTypeName = "Canned Fruit" },
                        new { StockTypeId = 12, StockTypeName = "Canned Vegetable" },
                        new { StockTypeId = 13, StockTypeName = "Canned Meat" },
                        new { StockTypeId = 14, StockTypeName = "Soda" },
                        new { StockTypeId = 15, StockTypeName = "Fruit Juice" },
                        new { StockTypeId = 16, StockTypeName = "Beer" },
                        new { StockTypeId = 17, StockTypeName = "Wine" },
                        new { StockTypeId = 18, StockTypeName = "Cider" },
                        new { StockTypeId = 19, StockTypeName = "Water" },
                        new { StockTypeId = 20, StockTypeName = "Yogurt" },
                        new { StockTypeId = 21, StockTypeName = "Cream" }
                    );
                });

            modelBuilder.Entity("StockTracker.Model.StockSupplier.StockSupplierDetail", b =>
                {
                    b.Property<int>("StockSupplierDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("MemberId")
                        .HasColumnType("INT");

                    b.Property<decimal>("Price")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("DECIMAL");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INT");

                    b.Property<int>("Unit")
                        .HasColumnType("INT");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("INT");

                    b.HasKey("StockSupplierDetailId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("StockSupplierDetail");
                });

            modelBuilder.Entity("StockTracker.Model.Supplier.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("Email");

                    b.Property<string>("SupplierLocation");

                    b.Property<string>("SupplierName");

                    b.Property<int>("SupplierTypeId");

                    b.HasKey("SupplierId");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("StockTracker.Model.Supplier.SupplierType", b =>
                {
                    b.Property<int>("SupplierTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SupplierTypeName");

                    b.HasKey("SupplierTypeId");

                    b.ToTable("SupplierType");
                });

            modelBuilder.Entity("StockTracker.Model.Unit.UnitType", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Symbol");

                    b.HasKey("UnitTypeId");

                    b.ToTable("UnitType");
                });

            modelBuilder.Entity("StockTracker.Model.Clients.ClientSettings", b =>
                {
                    b.HasOne("StockTracker.Model.Clients.Client", "Client")
                        .WithOne("ClientSettings")
                        .HasForeignKey("StockTracker.Model.Clients.ClientSettings", "ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.ClientStock.ClientStockItem", b =>
                {
                    b.HasOne("StockTracker.Model.Clients.Client", "Client")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.ClientStock.ClientStockItem", "ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Stock.StockCore", "StockCore")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.ClientStock.ClientStockItem", "StockCoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.ClientStock.ClientStockLevel", b =>
                {
                    b.HasOne("StockTracker.Model.ClientStock.ClientStockItem", "ClientStockItem")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.ClientStock.ClientStockLevel", "ClientStockItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Member.Member", "Member")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.ClientStock.ClientStockLevel", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommCore", b =>
                {
                    b.HasOne("StockTracker.Model.Comm.CommDetail", "CommDetail")
                        .WithMany()
                        .HasForeignKey("CommDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StockTracker.Model.Comm.CommSendStatusType", "CommSendStatusType")
                        .WithMany()
                        .HasForeignKey("CommSendStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockTracker.Model.Comm.CommDetail", b =>
                {
                    b.HasOne("StockTracker.Model.Comm.CommError", "CommError")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.Comm.CommDetail", "CommErrorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Member.Member", "Member")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.Comm.CommDetail", "MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.Member.Member", b =>
                {
                    b.HasOne("StockTracker.Model.Clients.Client", "Client")
                        .WithMany("Member")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Member.MemberRole", "MemberRole")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.Member.Member", "MemberRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Person.Person", "Person")
                        .WithOne()
                        .HasForeignKey("StockTracker.Model.Member.Member", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.Shopping.ShoppingList", b =>
                {
                    b.HasOne("StockTracker.Model.Member.Member", "Member")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.Shopping.ShoppingListItem", b =>
                {
                    b.HasOne("StockTracker.Model.Shopping.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Stock.StockCore", "StockCore")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("StockCoreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.Stock.StockCore", b =>
                {
                    b.HasOne("StockTracker.Model.Stock.StockCategory", "StockCategory")
                        .WithOne("StockCore")
                        .HasForeignKey("StockTracker.Model.Stock.StockCore", "StockCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.StockSupplier.StockSupplierDetail", "StockSupplierDetail")
                        .WithOne("StockCore")
                        .HasForeignKey("StockTracker.Model.Stock.StockCore", "StockSupplierDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StockTracker.Model.Stock.StockType", "StockType")
                        .WithOne("StockCore")
                        .HasForeignKey("StockTracker.Model.Stock.StockCore", "StockTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StockTracker.Model.StockSupplier.StockSupplierDetail", b =>
                {
                    b.HasOne("StockTracker.Model.Member.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StockTracker.Model.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StockTracker.Model.Unit.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockTracker.Model.Supplier.Supplier", b =>
                {
                    b.HasOne("StockTracker.Model.Supplier.SupplierType", "SupplierType")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
